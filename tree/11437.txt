import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

import javax.swing.InputMap;


public class Main {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

  int n = Integer.parseInt(br.readLine());
  ArrayList<Integer>[] a = new ArrayList[n+1];
  for (int i=1; i<=n; i++) {
      a[i] = new ArrayList<>();
  }
  
  for (int i=1; i<=n-1; i++) {
      String[] line = br.readLine().split(" ");
      int x = Integer.parseInt(line[0]);
      int y = Integer.parseInt(line[1]);
      a[x].add(y);
      a[y].add(x);
  }
  
  int[] depth = new int[n+1];
  boolean[] check = new boolean[n+1];
  int[] parent = new int[n+1];
  
  int start = 1;

  Queue<Integer> q = new LinkedList<Integer>();

  check[start] = true;
  depth[start] = 0;
  parent[start] = 0;
  q.add(start);
  
  while(!q.isEmpty()) {
	  int x=q.poll();
	  for(int y:a[x]) {
		  if(!check[y]) {
			  depth[y]=depth[x]+1;
			  check[y]=true;
			  parent[y]=x;
			  q.add(y);
		  }
	
	  }
	
  }
  
  int m = Integer.parseInt(br.readLine());
  while(m-->0) {
	  String s[]=br.readLine().split(" ");
	  int x=Integer.parseInt(s[0]);
	  int y=Integer.parseInt(s[1]);
	  
	  if(depth[x]<depth[y]) {//한쪽중 x를 깊다고 생각하고 풀기위해서
		  int temp=x;
		  x=y;
		  y=temp;
	  }
	  
	  while(depth[x]!=depth[y]) {
		  x=parent[x];
	  }
	  
	  while(x!=y) {
		  x=parent[x];
		  y=parent[y];
	  }
	  bw.append(x+"\n");
	  
	  
	  
  }
  bw.flush();
  
  
    
	}
}