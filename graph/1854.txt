import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;

class Node implements Comparable<Node>{
int to,cost;
public Node(int to,int cost) {
	// TODO Auto-generated constructor stub
this.to=to;
this.cost=cost;
}
@Override
public int compareTo(Node o) {
	// TODO Auto-generated method stub
	return this.cost-o.cost;
}
}

public class Main {
    

	 static class Compare implements Comparator<Integer> {//maxheap;
	        public int compare(Integer one, Integer two) {
	            return two.compareTo(one);
	        }
	    }
	public static void main(String[] args)   {
		// TODO Auto-generated method stub
		
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();//도시개수
int m=sc.nextInt();//도시 간에 존재하는 도로의 수
int k=sc.nextInt();//김 조교가 원하는 k번째 도착

List[] l=new ArrayList[n+1];

for(int i=0;i<n+1;i++)l[i]=new ArrayList<Node>();

while(m-->0) {
	int s=sc.nextInt();
	int e=sc.nextInt();
	int c=sc.nextInt();
	l[s].add(new Node(e,c));
}

PriorityQueue<Integer>[] dist = new PriorityQueue[n+1];//각 배열의 뜻은 배열번째 노드로 가는데 몇번째 거리인지 알기위해서
Compare cmp = new Compare();
for (int i=1; i<n+1; i++) {
    dist[i] = new PriorityQueue<Integer>(1, cmp);//최대힙을 사용하여 해당 배열 사이즈가 아직 k가 되지 않는다면 저장해주고 k번째라면  최대힙 자료구조 특성인 맨위에 있는 값과 비교한다.
}

dist[1].add(0);//1번에서 1번가는데 0의 시간 소요
PriorityQueue<Node> q = new PriorityQueue<Node>();

q.add(new Node(1,0));


while(!q.isEmpty()) {
	Node temp=q.poll();
	int x = temp.to;
	int c = temp.cost;
    
	for(int i=0;i<l[x].size();i++) {
		Node ntemp=(Node)l[x].get(i);
		int y=ntemp.to;
		if(dist[y].size()<k||dist[y].peek()>c+ntemp.cost) {
			if(dist[y].size()==k) {//기존에  저장했던 맨위값이 새로들어오는 것보다 작을때 맨위에 있던 값은 필요가없다.
				dist[y].poll();
			}
			dist[y].add(c+ntemp.cost);
            q.add(new Node(y,c+ntemp.cost));
		}
		
	}

}
for(int i=1;i<n+1;i++) {
	if(dist[i].size()==k) {
		System.out.println(dist[i].peek());
	}else {
		System.out.println(-1);
	}
	
}

	}
	
	
	}